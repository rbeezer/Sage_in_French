

<section xml:id="sec_combinatoire_briques">
  <title>Ensembles &#xe9;num&#xe9;r&#xe9;s usuels</title>
  <subsection>
    <title>Premier exemple: les sous-ensembles d'un ensemble</title>
    <p>
      Fixons un ensemble <m>E</m> de taille <m>n</m> et consid&#xe9;rons les sous-ensembles
      de <m>E</m> de taille <m>k</m>. On sait que ces sous-ensembles sont compt&#xe9;s par
      les coefficients binomiaux <m>\binom n k</m>. On peut donc calculer le
      nombre de sous-ensembles de taille <m>k=2</m> de <m>E=\{1,2,3,4\}</m> avec la
      fonction <c>binomial</c>:
    </p>

    <sage>
      <input>
        binomial(4, 2)
      </input>
      <output>
        6
      </output>
    </sage>

    <p>
      Alternativement, on peut <em>construire</em> l'ensemble <m>\mathcal
      P_2(E)</m> de tous les sous-ensembles de taille <m>2</m> de <m>E</m>, puis lui
      demander sa cardinalit&#xe9;:
    </p>

    <sage>
      <input>
        S = Subsets([1,2,3,4], 2)
        S.cardinality()
      </input>
      <output>
        6
      </output>
    </sage>

    <p>
      Une fois <c>S</c> construit, on peut aussi obtenir la liste de ses
      &#xe9;l&#xe9;ments:
    </p>

    <sage>
      <input>
        S.list()
      </input>
      <output>
        [{1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}]
      </output>
    </sage>

    <p>
      ou tirer un &#xe9;l&#xe9;ment au hasard:
    </p>

    <sage>
      <input>
        S.random_element() #doctest: random
      </input>
      <output>
        {1, 4}
      </output>
    </sage>

    <p>
      Plus pr&#xe9;cis&#xe9;ment, l'objet <c>S</c> mod&#xe9;lise l'ensemble <m>\mathcal
      P_2(E)</m>, muni d'une &#xe9;num&#xe9;ration fix&#xe9;e (donn&#xe9;e ici par l'ordre
      lexicographique). On peut donc demander son <m>5</m>-i&#xe8;me &#xe9;l&#xe9;ment, en
      prenant garde au fait que, comme pour les listes <em>Python</em> , le premier
      &#xe9;l&#xe9;ment est de rang <m>0</m>:
    </p>

    <sage>
      <input>
        S.unrank(4)
      </input>
      <output>
        {2, 4}
      </output>
    </sage>

    <p>
      &#xc0; titre de raccourci, on peut utiliser ici la notation:
    </p>

    <sage>
      <input>
        S[4]
      </input>
      <output>
        {2, 4}
      </output>
    </sage>

    <p>
      mais cela est &#xe0; utiliser avec prudence car certains ensembles sont
      munis d'une indexation naturelle autre que par <m>(0,\dots,)</m>.
    </p>

    <p>
      R&#xe9;ciproquement, on peut calculer le rang d'un objet dans cette
      &#xe9;num&#xe9;ration:
    </p>

    <sage>
      <input>
        s = S([2,4]); s
      </input>
      <output>
        {2, 4}
      </output>
    </sage>

    <sage>
      <input>
        S.rank(s)
      </input>
      <output>
        4
      </output>
    </sage>

    <p>
      &#xc0; noter que <c>S</c> n'<em>est pas</em> la liste de ses &#xe9;l&#xe9;ments. On
      peut par exemple mod&#xe9;liser l'ensemble <m>\mathcal P(\mathcal P(\mathcal
      P(E)))</m> et calculer sa cardinalit&#xe9; (<m>2^{2^{2^4}}</m>):
    </p>

    <sage>
      <input>
        E = Set([1,2,3,4])
        S = Subsets(Subsets(Subsets(E)))
        S.cardinality()
      </input>
      <output>
        2003529930406846464979072351560255750447825475569751419265016973
          ...736L
      </output>
    </sage>

    <p>
      soit environ <m>2\cdot 10^{19728}</m>:
    </p>

    <sage>
      <input>
        ZZ(S.cardinality()).ndigits()
      </input>
      <output>
        19729
      </output>
    </sage>

    <p>
      ou demander son <m>237102124</m>-i&#xe8;me &#xe9;l&#xe9;ment:
    </p>

    <sage>
      <input>
        S.unrank(237102123)
      </input>
      <output>
        {{{2, 4}, {1, 2}, {1, 4}, {}, {2, 3, 4}, {3, 4}, {1, 3, 4}, {1}, {4}},
           {{2, 4}, {3, 4}, {1, 2, 3, 4}, {1, 2, 3}, {}, {2, 3, 4}}}
      </output>
    </sage>

    <p>
      Il serait physiquement impossible de construire explicitement tous les
      &#xe9;l&#xe9;ments de <m>S</m> car il y en a bien plus que de particules dans
      l'univers (estim&#xe9;es &#xe0; <m>10^{82}</m>).
    </p>

    <p>
      Remarque: il serait naturel avec <em>Python</em>  d'utiliser <c>len(S)</c>
      pour demander la cardinalit&#xe9; de <c>S</c>. Cela n'est pas possible
      car <em>Python</em>  impose que le r&#xe9;sultat de <c>len</c> soit un entier de
      type <c>int</c>; cela pourrait causer des d&#xe9;bordements et ne
      permettrait pas de renvoyer <c>Infinity</c> pour les ensembles
      infinis.
    </p>

    <sage>
      <input>
        len(S)
      </input>
      <output>
        ...
        AttributeError: __len__ has been removed; use .cardinality() instead
      </output>
    </sage>
  </subsection>

  <subsection>
    <title>Partitions d'entiers</title>
    <p>
      Nous consid&#xe9;rons maintenant un autre probl&#xe8;me classique: &#xe9;tant donn&#xe9;
      un entier positif <m>n</m>, de combien de fa&#xe7;ons peut-on l'&#xe9;crire sous la
      forme d'une somme <m>n=i_1+i_2+\dots+i_\ell</m>, o&#xf9; <m>i_1,\dots,i_\ell</m> sont des
      entiers strictement positifs? Il y a deux cas &#xe0; distinguer:
      <ul>
        <li>
          <p>
            l'ordre des &#xe9;l&#xe9;ments dans la somme n'a pas d'importance, auquel
              cas <m>(i_1,\dots,i_\ell)</m> est une <em>partition</em> de <m>n</m>;
          </p>
        </li>

        <li>
          <p>
            l'ordre des &#xe9;l&#xe9;ments dans la somme rev&#xea;t une importance, auquel
              cas <m>(i_1,\dots,i_\ell)</m> est une <em>composition</em> de <m>n</m>.
          </p>
        </li>
      </ul>
    </p>

    <p>
      Regardons pour commencer les partitions de <m>n=5</m>; comme pr&#xe9;c&#xe9;demment,
      on commence par construire l'ensemble de ces partitions:
    </p>

    <sage>
      <input>
        P5 = Partitions(5); P5
      </input>
      <output>
        Partitions of the integer 5
      </output>
    </sage>

    <p>
      puis on demande sa cardinalit&#xe9;:
    </p>

    <sage>
      <input>
        P5.cardinality()
      </input>
      <output>
        7
      </output>
    </sage>

    <p>
      Regardons ces <m>7</m> partitions; l'ordre n'ayant pas d'importance, les
      entr&#xe9;es sont tri&#xe9;es, par convention, par ordre d&#xe9;croissant:
    </p>

    <sage>
      <input>
        P5.list()
      </input>
      <output>
        [[5], [4, 1], [3, 2], [3, 1, 1], [2, 2, 1], [2, 1, 1, 1],
           [1, 1, 1, 1, 1]]
      </output>
    </sage>

    <p>
      Le calcul du nombre de partitions utilise la formule de Rademacher,
      implant&#xe9;e en <c>C</c> et fortement optimis&#xe9;e, ce qui lui conf&#xe8;re une
      grande rapidit&#xe9;:
    </p>

    <sage>
      <input>
        Partitions(100000).cardinality()
      </input>
      <output>
        2749351056977569651267751632098635268817342931598005475820312598\
          4302147328114964173055050741660736621590157844774296248940493063\
          0702004617927644930335101160793424571901557189435097253124661084\
          5200636955893446424871682878983218234500926285383140459702130713\
          0674510624419227311238999702284408609370935531629697851569569892\
          196108480158600569421098519
      </output>
    </sage>

    <p>
      Les partitions d'entiers sont des objets combinatoires naturellement
      munis de multiples op&#xe9;rations.
      Elles sont donc renvoy&#xe9;es sous la forme d'objets plus riches que de
      simples listes:
    </p>

    <sage>
      <input>
        P7 = Partitions(7)
        p = P7.unrank(5); p
      </input>
      <output>
        [4, 2, 1]
      </output>
    </sage>

    <sage>
      <input>
        type(p)
      </input>
      <output>
        &lt;lt/>class 'sage.combinat.partition.Partition_class'>
      </output>
    </sage>

    <p>
      On peut par exemple les repr&#xe9;senter graphiquement par un diagramme de
      Ferrer:
    </p>

    <sage>
      <input>
        print p.ferrers_diagram()
      </input>
      <output>
        ****
          **
          *
      </output>
    </sage>

    <p>
      Nous laissons l'utilisateur explorer par introspection les
      op&#xe9;rations offertes.
    </p>

    <p>
      &#xc0; noter que l'on peut aussi construire une partition directement avec:
    </p>

    <sage>
      <input>
        Partition([4,2,1])
      </input>
      <output>
        [4, 2, 1]
      </output>
    </sage>

    <p>
      ou bien:
    </p>

    <sage>
      <input>
        P7([4,2,1])
      </input>
      <output>
        [4, 2, 1]
      </output>
    </sage>

    <p>
      Si l'on souhaite restreindre les valeurs possibles pour les parts
      <m>i_1,\dots,i_\ell</m> de la partition, comme par exemple dans les
      probl&#xe8;mes de rendu de monnaie, on peut utiliser
      <c>WeightedIntegerVectors</c>. Par exemple, le calcul suivant:
    </p>

    <sage>
      <input>
        WeightedIntegerVectors(8, [2,3,5]).list()
      </input>
      <output>
        [[0, 1, 1], [1, 2, 0], [4, 0, 0]]
      </output>
    </sage>

    <p>
      indique que pour former <m>8</m> dollars &#xe0; partir de billets de <m>2\dollar</m>,
      <m>3\dollar</m> et <m>5\dollar</m> dollars, on peut utiliser un billet de <m>3\dollar</m> et un de
      <m>5\dollar</m> ou un billet de <m>2\dollar</m> et deux de <m>3\dollar</m> ou <m>4</m> billets de <m>2\dollar</m>.
    </p>

    <p>
      Les compositions d'entiers se manipulent de la m&#xea;me fa&#xe7;on:
    </p>

    <sage>
      <input>
        C5 = Compositions(5); C5
      </input>
      <output>
        Compositions of 5
      </output>
    </sage>

    <sage>
      <input>
        C5.cardinality()
      </input>
      <output>
        16
      </output>
    </sage>

    <sage>
      <input>
        C5.list()
      </input>
      <output>
        [[1, 1, 1, 1, 1], [1, 1, 1, 2], [1, 1, 2, 1], [1, 1, 3],
           [1, 2, 1, 1], [1, 2, 2], [1, 3, 1], [1, 4], [2, 1, 1, 1],
           [2, 1, 2], [2, 2, 1], [2, 3], [3, 1, 1], [3, 2], [4, 1], [5]]
      </output>
    </sage>

    <p>
      Le <m>16</m> ci-dessus ne para&#xee;t pas anodin et sugg&#xe8;re l'existence d'une
      &#xe9;ventuelle formule. Regardons donc le nombre de compositions de <m>n</m>
      pour <m>n</m> variant de <m>0</m> &#xe0; <m>9</m>:
    </p>

    <sage>
      <input>
        [ Compositions(n).cardinality() for n in range(10) ]
      </input>
      <output>
        [1, 1, 2, 4, 8, 16, 32, 64, 128, 256]
      </output>
    </sage>

    <p>
      De m&#xea;me, si l'on compte le nombre de compositions de <m>5</m> par longueur,
      on retrouve une ligne du triangle de Pascal:
    </p>

    <sage>
      <input>
        sum( x^len(c) for c in C5 )
      </input>
      <output>
        x^5 + 4*x^4 + 6*x^3 + 4*x^2 + x
      </output>
    </sage>

    <p>
      L'exemple ci-dessus utilise une fonctionnalit&#xe9; que l'on n'avait pas
      encore crois&#xe9;e: <c>C5</c> &#xe9;tant it&#xe9;rable, on peut
      l'utiliser comme une liste dans une boucle <c>for</c> ou une
      compr&#xe9;hension (<xref ref="sec_combinatoire_briques_iterateurs">&#xa7;</xref>).
    </p>

    <paragraphs>
      <title>Exercice</title>
      <p>
        D&#xe9;montrer la formule sugg&#xe9;r&#xe9;e par les exemples ci-dessus pour le
        nombre de compositions de <m>n</m> et le nombre de compositions de <m>n</m>
        de longueur <m>k</m> et chercher par introspection si <em>Sage</em>  utilise ces
        formules pour le calcul de cardinalit&#xe9;.
      </p>
    </paragraphs>
  </subsection>

  <subsection xml:id="sec_combinatoire_briques_divers">
    <title>Quelques autres ensembles finis &#xe9;num&#xe9;r&#xe9;s</title>
    <p>
      Au final, le principe est le m&#xea;me pour tous les ensembles finis sur
      lesquels on veut faire de la combinatoire avec <em>Sage</em> ; on commence par
      construire un objet qui mod&#xe9;lise cet ensemble puis on utilise les
      m&#xe9;thodes idoines qui suivent une interface uniforme<fn>ou en
        tout cas cela devrait &#xea;tre le cas; il reste de nombreux coins &#xe0;
        nettoyer.</fn>. Nous donnons maintenant quelques autres exemples
      typiques.
    </p>

    <p>
      Les intervalles d'entiers:
    </p>

    <sage>
      <input>
        C = IntegerRange(3, 13, 2); C
      </input>
      <output>
        {3, 5 .. 11}
      </output>
    </sage>

    <sage>
      <input>
        C.cardinality()
      </input>
      <output>
        5
      </output>
    </sage>

    <sage>
      <input>
        C.list()
      </input>
      <output>
        [3, 5, 7, 9, 11]
      </output>
    </sage>

    <p>
      Les permutations:
    </p>

    <sage>
      <input>
        C = Permutations(4); C
      </input>
      <output>
        Standard permutations of 4
      </output>
    </sage>

    <sage>
      <input>
        C.cardinality()
      </input>
      <output>
        24
      </output>
    </sage>

    <sage>
      <input>
        C.list()
      </input>
      <output>
        [[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2],
           [1, 4, 2, 3], [1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3],
           [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1],
           [3, 1, 2, 4], [3, 1, 4, 2], [3, 2, 1, 4], [3, 2, 4, 1],
           [3, 4, 1, 2], [3, 4, 2, 1], [4, 1, 2, 3], [4, 1, 3, 2],
           [4, 2, 1, 3], [4, 2, 3, 1], [4, 3, 1, 2], [4, 3, 2, 1]]
      </output>
    </sage>

    <p>
      Les partitions ensemblistes:
    </p>

    <sage>
      <input>
        C = SetPartitions([1,2,3])
        C
      </input>
      <output>
        Set partitions of [1, 2, 3]
      </output>
    </sage>

    <sage>
      <input>
        C.cardinality()
      </input>
      <output>
        5
      </output>
    </sage>

    <sage>
      <input>
        C.list()
      </input>
      <output>
        [{{1, 2, 3}}, {{2, 3}, {1}}, {{1, 3}, {2}}, {{1, 2}, {3}},
           {{2}, {3}, {1}}]
      </output>
    </sage>

    <p>
      Les ordres partiels sur <m>5</m> sommets, &#xe0; un isomorphisme pr&#xe8;s:
    </p>

    <sage>
      <input>
        C = Posets(8); C
      </input>
      <output>
        Posets containing 8 vertices
      </output>
    </sage>

    <sage>
      <input>
        C.cardinality()
      </input>
      <output>
        16999
      </output>
    </sage>

    <sage>
      <input>
        C.unrank(20)).plot()
      </input>
    </sage>

    <p>
      \begin{sagesilent}
      g = Posets(8).unrank(20).plot()
      \end{sagesilent}
      \sageplot[scale=.5]{g}
    </p>

    <p>
      &#xc0; noter que l'on peut construire la liste des 34 graphes simples &#xe0; un
      isomorphisme pr&#xe8;s mais pas encore l'ensemble <c>C</c> de ces graphes
      (par exemple pour calculer <c>C.cardinality()</c>):
    </p>

    <sage>
      <input>
        len(list(graphs(5)))
      </input>
      <output>
        34
      </output>
    </sage>

    <p>
      Voici tous les graphes &#xe0; <m>5</m> sommets et moins de <m>4</m> ar&#xea;tes:
    </p>

    <sage>
      <input>
        show(graphs(5, lambda G: G.size() &lt;= 4))
      </input>
    </sage>

    <p>
      <image width="1000%" source="images/graphes5.png" />
    </p>

    <p>
      Ce que l'on a vu s'applique aussi, en principe, aux structures
      alg&#xe9;briques finies comme le groupe dih&#xe9;dral:
    </p>

    <sage>
      <input>
        G = DihedralGroup(4); G
      </input>
      <output>
        Dihedral group of order 8 as a permutation group
      </output>
    </sage>

    <sage>
      <input>
        G.cardinality()
      </input>
      <output>
        8
      </output>
    </sage>

    <sage>
      <input>
        G.list()
      </input>
      <output>
        [(), (2,4), (1,2)(3,4), (1,2,3,4), (1,3), (1,3)(2,4),
           (1,4,3,2), (1,4)(2,3)]
      </output>
    </sage>

    <p>
      ou l'alg&#xe8;bre des matrices <m>2\times 2</m> sur le corps fini <m>\Z/2\Z</m>:
    </p>

    <sage>
      <input>
        C = MatrixSpace(GF(2), 2)
        C.list()
      </input>
      <output>
        [
          [0 0]  [1 0]  [0 1]  [0 0]  [0 0]  [1 1]  [1 0]  [1 0]
          [0 0], [0 0], [0 0], [1 0], [0 1], [0 0], [1 0], [0 1],

          [0 1]  [0 1]  [0 0]  [1 1]  [1 1]  [1 0]  [0 1]  [1 1]
          [1 0], [0 1], [1 1], [1 0], [0 1], [1 1], [1 1], [1 1]
          ]
      </output>
    </sage>

    <p>
      Cependant ceci devrait renvoyer 16, mais n'est pas encore implant&#xe9;:
    </p>

    <sage>
      <input>
        C.cardinality()
      </input>
      <output>
        Traceback (most recent call last):
          ...
          AttributeError:
          'MatrixSpace_generic' object has no attribute 'cardinality'
      </output>
    </sage>

    <paragraphs>
      <title>Exercice</title>
      <p>
        Lister tous les mon&#xf4;mes de degr&#xe9; <m>5</m> dans les polyn&#xf4;mes en trois
        variables (voir <c>IntegerVectors</c>). Manipuler les partitions
        ensemblistes ordonn&#xe9;es (<c>OrderedSetPartitions</c>) et les
        tableaux standard (<c>StandardTableaux</c>).
      </p>
    </paragraphs>
    <paragraphs>
      <title>Exercice</title>
      <p>
        Lister les matrices &#xe0; signe alternant de taille <m>3</m>, <m>4</m> et <m>5</m>
        (<c>AlternatingSignMatrices</c>), et essayer de deviner leur
        d&#xe9;finition.
        La d&#xe9;couverte et la d&#xe9;monstration de la
        formule de d&#xe9;nombrement de ces matrices (voir la m&#xe9;thode
        <c>cardinality</c>), motiv&#xe9;e par des calculs de d&#xe9;terminants en
        physique, a &#xe9;t&#xe9; l'objet de toute une &#xe9;pop&#xe9;e. En particulier la
        premi&#xe8;re d&#xe9;monstration, donn&#xe9;e par Zeilberger en 1992 a &#xe9;t&#xe9; produite
        automatiquement par un programme, occupe 84 pages, et a n&#xe9;cessit&#xe9;
        l'intervention de presque cent
        v&#xe9;rificateurs<nbsp /><nbsp /><xref ref="Zeilberger_1996_AlternatingSignMatrices" />.
      </p>
    </paragraphs>
    <paragraphs>
      <title>Exercice</title>
      <p>
        Calculer &#xe0; la main le nombre de vecteurs dans <m>(\Z/2\Z)^5</m> puis le
        nombre de matrices dans <m>GL_3(\Z/2\Z)</m> (c'est-&#xe0;-dire le nombre de
        matrices <m>3\times 3</m> &#xe0; coefficients dans <m>\Z/2\Z</m> et
        inversibles). V&#xe9;rifier votre r&#xe9;ponse avec <em>Sage</em> . G&#xe9;n&#xe9;raliser &#xe0;
        <m>GL_n(\Z/q\Z)</m>.
      </p>
    </paragraphs>
  </subsection>

  <subsection xml:id="sec_combinatoire_briques_iterateurs">
    <title>Compr&#xe9;hensions et it&#xe9;rateurs</title>
    <introduction>
      <p>
        Nous allons maintenant montrer quelques possibilit&#xe9;s offertes par
        <em>Python</em>  pour construire (et it&#xe9;rer sur) des ensembles avec une
        notation flexible et proche des math&#xe9;matiques, et le profit que l'on
        peut en tirer en combinatoire.
      </p>

      <p>
        Commen&#xe7;ons par construire l'ensemble fini <m>\{i^2\ |\ i
        \in \{1,3,7\}\}</m>:
      </p>

      <sage>
        <input>
          [ i^2 for i in [1, 3, 7] ]
        </input>
        <output>
          [1, 9, 49]
        </output>
      </sage>

      <p>
        puis le m&#xea;me ensemble avec <m>i</m> variant cette fois entre <m>1</m> et <m>9</m>:
      </p>

      <sage>
        <input>
          [ i^2 for i in range(1,10) ]
        </input>
        <output>
          [1, 4, 9, 16, 25, 36, 49, 64, 81]
        </output>
      </sage>

      <p>
        On appelle <em>compr&#xe9;hension</em> une telle construction
        <em>Python</em> .
        On peut rajouter un pr&#xe9;dicat pour ne garder que les &#xe9;l&#xe9;ments avec <m>i</m>
        premier:
      </p>

      <sage>
        <input>
          [ i^2 for i in range(1,10) if is_prime(i) ]
        </input>
        <output>
          [4, 9, 25, 49]
        </output>
      </sage>

      <p>
        En combinant plusieurs compr&#xe9;hensions, on peut construire l'ensemble
        <m>\{(i,j) \ |\ 1\leq j \lt  i \lt  5\}</m>:
      </p>

      <sage>
        <input>
          [ (i,j) for i in range(1,6) for j in range(1,i) ]
        </input>
        <output>
          [(2, 1), (3, 1), (3, 2), (4, 1), (4, 2), (4, 3),
             (5, 1), (5, 2), (5, 3), (5, 4)]
        </output>
      </sage>

      <p>
        ou bien afficher le triangle de Pascal:
      </p>

      <sage>
        <input>
          [ [ binomial(n, i) for i in range(n+1) ] for n in range(10) ]
        </input>
        <output>
          [[1],
             [1, 1],
             [1, 2, 1],
             [1, 3, 3, 1],
             [1, 4, 6, 4, 1],
             [1, 5, 10, 10, 5, 1],
             [1, 6, 15, 20, 15, 6, 1],
             [1, 7, 21, 35, 35, 21, 7, 1],
             [1, 8, 28, 56, 70, 56, 28, 8, 1],
             [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]]
        </output>
      </sage>

      <p>
        L'ex&#xe9;cution d'une compr&#xe9;hension se fait en deux &#xe9;tapes; tout d'abord
        un <em>it&#xe9;rateur</em> est construit, puis une liste est remplie avec les
        &#xe9;l&#xe9;ments renvoy&#xe9;s successivement par l'it&#xe9;rateur. Techniquement, un
        <em>it&#xe9;rateur</em> est un objet avec une m&#xe9;thode <c>next</c> qui
        renvoie &#xe0; chaque appel une nouvelle valeur, jusqu'&#xe0; &#xe9;puisement. Par
        exemple, l'it&#xe9;rateur <c>it</c> suivant:
      </p>

      <sage>
        <input>
          it = (binomial(3, i) for i in range(4))
        </input>
      </sage>

      <p>
        renvoie successivement les coefficients binomiaux <m>\binom 3 i</m> avec
        <m>i=0,1,2,3</m>:
      </p>

      <sage>
        <input>
          it.next()
        </input>
        <output>
          1
        </output>
      </sage>

      <sage>
        <input>
          it.next()
        </input>
        <output>
          3
        </output>
      </sage>

      <sage>
        <input>
          it.next()
        </input>
        <output>
          3
        </output>
      </sage>

      <sage>
        <input>
          it.next()
        </input>
        <output>
          1
        </output>
      </sage>

      <p>
        Lorsque l'it&#xe9;rateur est finalement &#xe9;puis&#xe9;, une exception est lev&#xe9;e:
      </p>

      <sage>
        <input>
          it.next()
        </input>
        <output>
          Traceback (most recent call last):
              ...
            StopIteration
        </output>
      </sage>

      <p>
        Dans la pratique on n'utilise que tr&#xe8;s rarement directement cette
        m&#xe9;thode <em>next</em>. Un <em>it&#xe9;rable</em> est un object <em>Python</em> 
        <c>L</c> (une liste, un ensemble, ...) sur les &#xe9;l&#xe9;ments duquel on
        peut it&#xe9;rer. Techniquement, on construit l'it&#xe9;rateur avec
        <c>iter(L)</c>, mais l&#xe0; encore on ne le fait que rarement
        explicitement.
      </p>

      <p>
        Quel est l'int&#xe9;r&#xea;t d'un it&#xe9;rateur? Consid&#xe9;rons l'exemple suivant:
      </p>

      <sage>
        <input>
          sum( [ binomial(8, i) for i in range(9) ] )
        </input>
        <output>
          256
        </output>
      </sage>

      <p>
        &#xc0; l'ex&#xe9;cution, une liste avec <m>9</m> &#xe9;l&#xe9;ments est construite, puis elle
        est pass&#xe9;e en argument &#xe0; <c>sum</c> pour les ajouter. Si au
        contraire on passe directement l'it&#xe9;rateur &#xe0; <c>sum</c> (noter
        l'absence de crochets):
      </p>

      <sage>
        <input>
          sum( binomial(8, i) for i in xrange(9) )
        </input>
        <output>
          256
        </output>
      </sage>

      <p>
        la fonction <c>sum</c> re&#xe7;oit directement l'it&#xe9;rateur, et peut ainsi
        court-circuiter la construction de la liste interm&#xe9;diaire. Lorsqu'il y
        a un grand nombre d'&#xe9;l&#xe9;ments, cela &#xe9;vite donc d'allouer une grosse
        quantit&#xe9; de m&#xe9;moire pour stocker une liste qui sera imm&#xe9;diatement
        d&#xe9;truite<fn>D&#xe9;tail technique: <c>xrange</c> renvoie un
          it&#xe9;rateur sur \{0,...,8\} alors que <c>range</c> en renvoie la
          liste. &#xc0; partir de \Python 3.0, <c>range</c> se comportera comme
          <c>xrange</c>, et on pourra oublier ce dernier.</fn>.
      </p>

      <p>
        La plupart des fonctions prenant une liste d'&#xe9;l&#xe9;ments en entr&#xe9;e
        acceptent un it&#xe9;rateur (ou un it&#xe9;rable) &#xe0; la place. Et pour commencer,
        on peut obtenir la liste (ou le tuple) des &#xe9;l&#xe9;ments d'un it&#xe9;rateur
        avec:
      </p>

      <sage>
        <input>
          list(binomial(8, i) for i in xrange(9))
        </input>
        <output>
          [1, 8, 28, 56, 70, 56, 28, 8, 1]
        </output>
      </sage>

      <sage>
        <input>
          tuple(binomial(8, i) for i in xrange(9))
        </input>
        <output>
          (1, 8, 28, 56, 70, 56, 28, 8, 1)
        </output>
      </sage>

      <p>
        Consid&#xe9;rons maintenant les fonctions <c>all</c> and <c>any</c>
        (qui d&#xe9;notent respectivement le <em>et</em> et le <em>ou</em> <m>n</m>-aire):
      </p>

      <sage>
        <input>
          all([True, True, True, True])
        </input>
        <output>
          True
        </output>
      </sage>

      <sage>
        <input>
          all([True, False, True, True])
        </input>
        <output>
          False
        </output>
      </sage>

      <sage>
        <input>
          any([False, False, False, False])
        </input>
        <output>
          False
        </output>
      </sage>

      <sage>
        <input>
          any([False, False, True, False])
        </input>
        <output>
          True
        </output>
      </sage>

      <p>
        L'exemple suivant v&#xe9;rifie que tous les entiers premiers entre <m>3</m> et
        <m>100</m> exclus sont impairs:
      </p>

      <sage>
        <input>
          all( is_odd(p) for p in range(3,100) if is_prime(p) )
        </input>
        <output>
          True
        </output>
      </sage>

      <p>
        Les nombres de Mersenne <m>M_p</m> sont les nombres de la forme
        <m>2^p-1</m>. Ici nous v&#xe9;rifions, pour <m>p\lt 1000</m>, que si <m>M_p</m> est premier
        alors <m>p</m> est premier aussi:
      </p>

      <sage>
        <input>
          def mersenne(p): return 2^p -1
          [ is_prime(p)
          for p in range(1000) if is_prime(mersenne(p)) ]
        </input>
        <output>
          [True, True, True, True, True, True, True, True, True, True,
             True, True, True, True]
        </output>
      </sage>

      <p>
        La r&#xe9;ciproque est-elle vraie?
      </p>

      <paragraphs>
        <title>Exercice</title>
        <p>
          Essayer les deux commandes suivantes et expliquer la diff&#xe9;rence
          consid&#xe9;rable de temps de calcul:
        </p>

        <sage>
          <input>
            all(   is_prime(mersenne(p))
            for p in range(1000) if is_prime(p)  )
          </input>
          <output>
            False
          </output>
        </sage>

        <sage>
          <input>
            all( [ is_prime(mersenne(p))
            for p in range(1000) if is_prime(p)] )
          </input>
          <output>
            False
          </output>
        </sage>
      </paragraphs>
      <p>
        On cherche maintenant &#xe0; trouver le plus petit contre-exemple. Pour
        cela on utilise la fonction <em>Sage</em>  <c>exists</c>:
      </p>

      <sage>
        <input>
          exists( (p for p in range(1000) if is_prime(p)),
          lambda p: not is_prime(mersenne(p)) )
        </input>
        <output>
          (True, 11)
        </output>
      </sage>

      <p>
        Alternativement, on peut construire un it&#xe9;rateur sur tous les
        contre-exemples:
      </p>

      <sage>
        <input>
          contre_exemples = \
          (p for p in range(1000)
          if is_prime(p) and not is_prime(mersenne(p)))
          contre_exemples.next()
        </input>
        <output>
          11
        </output>
      </sage>

      <sage>
        <input>
          contre_exemples.next()
        </input>
        <output>
          23
        </output>
      </sage>

      <paragraphs>
        <title>Exercice</title>
        <p>
          Que font les commandes suivantes?
        </p>

        <sage>
          <input>
            cubes = [t**3 for t in range(-999,1000)]
            exists([(x,y) for x in cubes for y in cubes],
            lambda (x,y): x+y == 218)
          </input>
          <output>
            (True, (-125, 343))
          </output>
        </sage>

        <sage>
          <input>
            exists(((x,y) for x in cubes for y in cubes),
            lambda (x,y): x+y == 218)
          </input>
          <output>
            (True, (-125, 343))
          </output>
        </sage>

        <p>
          Laquelle des deux derni&#xe8;res est-elle la plus &#xe9;conome en temps? En m&#xe9;moire? De combien?
        </p>
      </paragraphs>
      <paragraphs>
        <title>Exercice</title>
        <p>
          Essayer tour &#xe0; tour les commandes suivantes, et expliquer leurs
          r&#xe9;sultats. Attention: il sera n&#xe9;cessaire d'interrompre l'ex&#xe9;cution
          de certaines de ces commandes en cours de route.
        </p>

        <sage>
          <input>
            sum( x^len(s) for s in Subsets(8) )
          </input>
        </sage>

        <sage>
          <input>
            sum( x^p.length() for p in Permutations(3) )
          </input>
        </sage>

        <sage>
          <input>
            factor(sum( x^p.length() for p in Permutations(3) ))
          </input>
        </sage>

        <sage>
          <input>
            P = Permutations(5)
            all( p in P for p in P )
          </input>
          <output>
            True
          </output>
        </sage>

        <sage>
          <input>
            for p in GL(2, 2): print p; print
          </input>
        </sage>

        <sage>
          <input>
            for p in Partitions(3): print p
          </input>
        </sage>

        <sage>
          <input>
            for p in Partitions(): print p
          </input>
        </sage>

        <sage>
          <input>
            for p in Primes(): print p
          </input>
        </sage>

        <sage>
          <input>
            exists( Primes(), lambda p: not is_prime(mersenne(p)) )
          </input>
          <output>
            (True, 11)
          </output>
        </sage>

        <sage>
          <input>
            contre_exemples = (p for p in Primes()
            if not is_prime(mersenne(p)))
            for p in contre_exemples: print p
          </input>
        </sage>
      </paragraphs>
    </introduction>
    <subsubsection>
    <title>Op&#xe9;rations sur les it&#xe9;rateurs</title>
    <p>
      <em>Python</em>  fournit de nombreux utilitaires pour manipuler des it&#xe9;rateurs;
      la plupart d'entre eux sont dans la biblioth&#xe8;que <c>itertools</c>
      que l'on peut importer avec:
    </p>

    <pre>
      import itertools
    </pre>

    <p>
      Nous en montrons quelques applications, en prenant comme point de
      d&#xe9;part l'ensemble des permutations de <m>3</m>:
    </p>

    <sage>
      <input>
        list(Permutations(3))
      </input>
      <output>
        [[1, 2, 3], [1, 3, 2], [2, 1, 3],
           [2, 3, 1], [3, 1, 2], [3, 2, 1]]
      </output>
    </sage>

    <p>
      Nous pouvons &#xe9;num&#xe9;rer les &#xe9;l&#xe9;ments d'un ensemble en les num&#xe9;rotant:
    </p>

    <sage>
      <input>
        list(enumerate(Permutations(3)))
      </input>
      <output>
        [(0, [1, 2, 3]), (1, [1, 3, 2]), (2, [2, 1, 3]),
           (3, [2, 3, 1]), (4, [3, 1, 2]), (5, [3, 2, 1])]
      </output>
    </sage>

    <p>
      s&#xe9;lectionner seulement les &#xe9;l&#xe9;ments en position 2, 3 et 4 (analogue de
      <c>l[1:4]</c>):
    </p>

    <sage>
      <input>
        import itertools
        list(itertools.islice(Permutations(3), 1, 4))
      </input>
      <output>
        [[1, 3, 2], [2, 1, 3], [2, 3, 1]]
      </output>
    </sage>

    <p>
      appliquer une fonction sur tous les &#xe9;l&#xe9;ments:
    </p>

    <sage>
      <input>
        list(itertools.imap(lambda z: z.cycle_type(),
        Permutations(3)))
      </input>
      <output>
        [[1, 1, 1], [2, 1], [2, 1], [3], [3], [2, 1]]
      </output>
    </sage>

    <p>
      ou s&#xe9;lectionner les &#xe9;l&#xe9;ments v&#xe9;rifiant un certain pr&#xe9;dicat:
    </p>

    <sage>
      <input>
        list(itertools.ifilter(lambda z: z.has_pattern([1,2]),
        Permutations(3)))
      </input>
    </sage>

    <p>
      Dans toutes ces situations, <c>attrcall</c> est une alternative
      avantageuse &#xe0; la cr&#xe9;ation d'une fonction anonyme:
    </p>

    <sage>
      <input>
        list(itertools.imap(attrcall("cycle_type"),
        Permutations(3)))
      </input>
      <output>
        [[1, 1, 1], [2, 1], [2, 1], [3], [3], [2, 1]]
      </output>
    </sage>

    </subsubsection>


    <subsubsection>
    <title>Implantation de nouveaux it&#xe9;rateurs</title>
    <p>
      Il est possible de construire tr&#xe8;s facilement de nouveaux
      it&#xe9;rateurs, en utilisant le mot clef <c>yield</c> plut&#xf4;t que
      <c>return</c> dans une fonction:
    </p>

    <sage>
      <input>
        def f(n):
        for i in range(n):
        yield i
      </input>
    </sage>

    <p>
      &#xc0; la suite du <c>yield</c>, l'ex&#xe9;cution n'est pas arr&#xea;t&#xe9;e, mais
      seulement suspendue, et pr&#xea;te &#xe0; reprendre au m&#xea;me point. Le r&#xe9;sultat
      de la fonction est alors un it&#xe9;rateur sur les valeurs successives
      renvoy&#xe9;es par <c>yield</c>:
    </p>

    <sage>
      <input>
        g = f(4)
        g.next()
      </input>
      <output>
        0
      </output>
    </sage>

    <sage>
      <input>
        g.next()
      </input>
      <output>
        1
      </output>
    </sage>

    <sage>
      <input>
        g.next()
      </input>
      <output>
        2
      </output>
    </sage>

    <sage>
      <input>
        g.next()
      </input>
      <output>
        3
      </output>
    </sage>

    <sage>
      <input>
        g.next()
      </input>
      <output>
        Traceback (most recent call last):
            ...
          StopIteration
      </output>
    </sage>

    <p>
      En utilisation courante, cela donnera:
    </p>

    <sage>
      <input>
        [ x for x in f(5) ]
      </input>
      <output>
        [0, 1, 2, 3, 4]
      </output>
    </sage>

    <p>
      Ce paradigme de programmation, appel&#xe9; <em>continuation</em> est tr&#xe8;s
      utile en combinatoire, surtout quand on le combine avec la r&#xe9;cursivit&#xe9;
      (voir aussi <xref ref="sec_meth-de-dich">&#xa7;</xref> pour d'autres
      applications). Voici comment engendrer tous les mots d'une longueur et
      sur un alphabet donn&#xe9;s:
    </p>

    <sage>
      <input>
        def words(alphabet,l):
        if l == 0:
        yield []
        else:
        for word in words(alphabet, l-1):
        for l in alphabet:
        yield word + [l]
        [ w for w in words(['a','b'], 3) ]
      </input>
      <output>
        [['a','a','a'], ['a','a','b'], ['a','b','a'], ['a','b','b'],
           ['b','a','a'], ['b','a','b'], ['b','b','a'], ['b','b','b']]
      </output>
    </sage>

    <p>
      On peut les compter avec:
    </p>

    <sage>
      <input>
        sum(1 for w in words(['a','b','c','d'], 10))
      </input>
      <output>
        1048576
      </output>
    </sage>

    <p>
      Compter les mots un par un n'est &#xe9;videmment pas une m&#xe9;thode efficace
      dans ce cas, puisque l'on pourrait utiliser la formule <m>n^\ell</m>; au
      moins cela ne consomme quasiment aucune m&#xe9;moire.
    </p>

    <p>
      On consid&#xe8;re maintenant les mots de Dyck, c'est-&#xe0;-dire les mots bien
      parenth&#xe9;s&#xe9;s en les lettres <q><m>(</m></q> et <q><m>)</m></q>. La fonction ci-dessous
      engendre tous les mots de Dyck d'une longueur donn&#xe9;e (ou la longueur
      est le nombre de paires de parenth&#xe8;ses), en utilisant la d&#xe9;finition
      r&#xe9;cursive disant qu'un mot de Dyck est soit vide, soit de la forme
      <m>(w_1)w_2</m> avec <m>w_1</m> et <m>w_2</m> des mots de Dyck:
    </p>

    <sage>
      <input>
        def dyck_words(l):
      </input>
      <output>
        ...       if l==0:
          ...           yield ''
          ...       else:
          ...           for k in range(l):
          ...               for w1 in dyck_words(k):
          ...                   for w2 in dyck_words(l-k-1):
          ...                       yield '('+w1+')'+w2
      </output>
    </sage>

    <p>
      Voici tous les mots de Dyck de longueur <m>4</m>:
    </p>

    <sage>
      <input>
        list(dyck_words(4))
      </input>
      <output>
        ['()()()()', '()()(())', '()(())()', '()(()())', '()((()))',
           '(())()()', '(())(())', '(()())()', '((()))()', '(()()())',
           '(()(()))', '((())())', '((()()))', '(((())))']
      </output>
    </sage>

    <p>
      On retrouve, en les comptant, une suite bien connue:
    </p>

    <sage>
      <input>
        [ sum(1 for w in dyck_words(l)) for l in range(10) ]
      </input>
      <output>
        [1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862]
      </output>
    </sage>

    <paragraphs xml:id="exo_combinatoire_briques_iterateurs_catalan">
      <title>Exercice</title>
      <p>
        Construire un it&#xe9;rateur sur l'ensemble <m>C_n</m> des arbres binaires
        complets &#xe0; <m>n</m> feuilles
        (voir <xref ref="sec_combinatoire_exemples_catalan">&#xa7;</xref>).
      </p>

      <p>
        Indication: <em>Sage</em>  4.4.4 n'a pas encore de structure de donn&#xe9;e native
        pour repr&#xe9;senter des arbres binaires complets. Une mani&#xe8;re simple de
        repr&#xe9;senter des arbres est de d&#xe9;finir une variable formelle
        <c>Leaf</c> pour les feuilles et une fonction formelle
        <c>Node</c> d'arit&#xe9; <m>2</m>:
      </p>

      <sage>
        <input>
          var("Leaf")
          function("Node", nargs=2)
        </input>
      </sage>

      <p>
        Le deuxi&#xe8;me arbre de la
        <xref ref="fig_combinatoire_exemples_catalan_arbres">figure</xref> peut alors
        &#xea;tre repr&#xe9;sent&#xe9; par l'expression:
      </p>

      <sage>
        <input>
          tr = Node(Node(Leaf, Node(Leaf, Leaf)), Leaf)
        </input>
      </sage>
    </paragraphs>
    </subsubsection>
  </subsection>
</section>

