

<section>
  <title>Alg&#xe8;bre lin&#xe9;aire</title>
  <p>
    \begin{correction}{exo:minpoly} (<em>Polyn&#xf4;me minimal de vecteurs</em>)
    <ol>
      <li>
        <p>
          <m>\phi_A</m> est un polyn&#xf4;me  annulateur de tous les vecteurs  <m>e_i</m> de la
              base. Il est donc un commun multiple des <m>\phi_{A,e_i}</m>. Soit <m>\psi</m> le ppcm
              des <m>\phi_{A,e_i}</m>. Donc <m>\psi | \phi_A</m>. Par ailleurs,  <m>\psi(A)=
              \begin{bmatrix}\psi(A)e_1\amp \dots\amp \psi(A)e_n
          \end{bmatrix} = 0</m> est annulateur de la matrice <m>A</m>. D'o&#xf9;
              <m>\phi_A | \psi</m>. Comme ces polyn&#xf4;mes sont unitaires, ils sont &#xe9;gaux.
        </p>
      </li>

      <li>
        <p>
          Dans ce cas, tous les <m>\phi_{A,e_i}</m> sont sous la forme <m>\chi^{\ell_i}</m>, o&#xf9;
              <m>\chi</m> est un polyn&#xf4;me irr&#xe9;ductible. D'apr&#xe8;s la question pr&#xe9;c&#xe9;dente,
              <m>\phi_A</m> co&#xef;ncide donc avec celui des <m>\chi^{\ell_i}</m> ayant la puissance
              <m>\ell_i</m> maximale.
        </p>
      </li>

      <li>
        <p>
          Soit <m>\phi</m> un polyn&#xf4;me annulateur de <m>e=e_i+e_j</m> et
              <m>\phi_1=\phi_{A,e_i}, \phi_2=\phi_{A,e_j}</m>. On a
              <m>\phi_2(A)\phi(A)e_i=
              \phi_2(A)\phi(A)e-\phi(A)\phi_2(A)e_j=0</m>. Donc
              <m>\phi_2\phi</m> est annulateur de <m>e_i</m> et est donc divisible par <m>\phi_1</m>. Or
              <m>\phi_1</m> et <m>\phi_2</m> &#xe9;tant premiers entre eux, on a <m>\phi_1 | \phi</m>. De la
              m&#xea;me fa&#xe7;on on montre que <m>\phi_2 | \phi</m>, donc <m>\phi</m> est un multiple de
              <m>\phi_1 \phi_2</m>. Or <m>\phi_1\phi_2</m> est annulateur de <m>e</m>, donc <m>\phi=\phi_1\phi_2</m>.
        </p>
      </li>

      <li>
        <p>
          <m>P_1</m> et <m>P_2</m> &#xe9;tant premiers entre eux, il existe deux polyn&#xf4;mes
              <m>\alpha</m> et <m>\beta</m> tels que <m>1=\alpha P_1+\beta P_2</m>. Ainsi pour tout <m>x</m>,
              on a
              <m>x=\alpha(A)P_1(A)x+\beta(A)P_2(A)x=x_2+x_1</m>, o&#xf9; <m>x_1=\beta(A)P_2(A)x</m> et
              <m>x_2=\alpha(A)P_a(A)x</m>. <m>P_1</m> est annulateur de <m>x_1</m>. Si pour tout <m>x</m>,
              <m>x_1=0</m>, alors <m>\beta P_1</m> est annulateur de <m>A</m> et est donc un multiple de
              <m>P_1P_2</m>, d'o&#xf9; <m>1=P_1(\alpha+\gamma P_2)</m>, qui implique <m>\deg P_1 =0</m>.
              Il existe donc un <m>x_1</m> non nul tel que <m>P_1</m> soit un polyn&#xf4;me annulateur de
              <m>x_1</m>. Montrons que <m>P_1</m> est minimal: soit <m>\tilde{P_1}</m> un polyn&#xf4;me
              annulateur de <m>x_1</m>. Alors <m>\tilde{P_1}(A)P_2(A)x = P_2(A)\tilde{P_1}(A)x_1 +
              \tilde{P_1}(A)P_2x_2 = 0</m>, donc   <m>\tilde{P_1} P_2</m> est un multiple de
              <m>\phi_A=P_1P_2</m>. Ainsi <m>P_1|\tilde{P_1}</m> et <m>P_1</m> est donc le polyn&#xf4;me minimal
              de <m>x_1</m>.
              Le raisonnement est identique pour <m>x_2</m>.
        </p>
      </li>

      <li>
        <p>
          Pour chaque facteur <m>\phi_i^{m_i}</m>, il existe un vecteur <m>x_i</m> dont
              <m>\phi_i^{m_i}</m> est le polyn&#xf4;me minimal et le vecteur <m>x_1+\dots+x_k</m> a
              <m>\phi_A</m> pour polyn&#xf4;me minimal.
        </p>
      </li>

      <li>
        <p>

          <sage>
            <input>
              A=matrix(GF(7),5,
              [0,0,3,0,0,1,0,6,0,0,0,1,5,0,0,0,0,0,0,5,0,0,0,1,5]); A
            </input>
            <output>
              [0 0 3 0 0]
              [1 0 6 0 0]
              [0 1 5 0 0]
              [0 0 0 0 5]
              [0 0 0 1 5]
            </output>
          </sage>

          <sage>
            <input>
              P=A.minpoly();P
            </input>
            <output>
              x^5 + 4*x^4 + 3*x^2 + 3*x + 1
            </output>
          </sage>

          <sage>
            <input>
              P.factor()
            </input>
            <output>
              (x^2 + 2*x + 2) * (x^3 + 2*x^2 + x + 4)
            </output>
          </sage>

          Le polyn&#xf4;me minimal de la matrice <m>A</m> est de degr&#xe9; maximal.

          <sage>
            <input>
              e1=identity_matrix(GF(7),5)[0];
              e4=identity_matrix(GF(7),5)[3];
              A.transpose().maxspin(e1)
            </input>
            <output>
              [(1, 0, 0, 0, 0), (0, 1, 0, 0, 0), (0, 0, 1, 0, 0)]
            </output>
          </sage>

          <sage>
            <input>
              A.transpose().maxspin(e4)
            </input>
            <output>
              [(0, 0, 0, 1, 0), (0, 0, 0, 0, 1)]
            </output>
          </sage>

          <sage>
            <input>
              A.transpose().maxspin(e1+e4)
            </input>
            <output>
              [(1, 0, 0, 1, 0), (0, 1, 0, 0, 1), (0, 0, 1, 5, 5),
               (3, 6, 5, 4, 2), (1, 5, 3, 3, 0)]
            </output>
          </sage>

          La fonction <c>maxspin</c> it&#xe8;re un vecteur <em>&#xe0; gauche</em>. On l'appliquera donc
          sur la transpos&#xe9;e de la matrice afin d'obtenir la liste des it&#xe9;r&#xe9;s de Krylov
          lin&#xe9;airement ind&#xe9;pendants &#xe0; partir des vecteurs <m>e_1</m> et <m>e_4</m>.
          On notera que la forme particuli&#xe8;re de la matrice fait que
          les vecteurs  <m>e_1</m> et <m>e_4</m> engendreront comme it&#xe9;r&#xe9;s d'autres vecteurs de la
          base canonique. Cette forme est appel&#xe9;e la forme normale de Frobenius, et sera
          &#xe9;tudi&#xe9;e &#xe0; la fin de la <xref ref="sec_linalg_similitude">partie</xref>. Elle d&#xe9;crit de quelle mani&#xe8;re la matrice d&#xe9;compose
          l'espace en sous-espaces cycliques invariants qui sont engendr&#xe9;s par des vecteurs de
          la base canonique.
        </p>
      </li>
    </ol>
  </p>

  <p>
    \end{correction}
  </p>

  <p>
    \begin{correction}{exo:testsimilitude} (<em>Test si deux matrices sont
    semblables</em>)
  </p>

  <pre>
    def Semblables(A,B):
        F1,U1 = A.frobenius(2)
        F2,U2 = B.frobenius(2)
        if F1==F2:
            return True, &#126;U2*U1
        else:
            return False,  A.matrix_space().zero_matrix()
  </pre>

  <p>
    \end{correction}
  </p>
</section>

